[tool.poetry]
name = "Savings Manager"
version = "2.34.0-alpha"
description = "Savings Manager is an intuitive app for managing your savings using virtual moneyboxes. Allocate budgets, automate savings, and set priorities to reach goals faster. The app adjusts automatically when you withdraw, ensuring your plan stays on track. Easily transfer funds between moneyboxes or make manual deposits, giving you full control over your savings journey."
authors = ["'PythBuster' <'pythbuster@gmail.com'>"]
readme = "README.md"
packages = [
    { include = "src" },
]

[tool.poetry.dependencies]
python = "^3.12"
alembic = "^1.13.2"
sqlalchemy = {extras = ["asyncio"], version = "^2.0.31"}
pydantic = {extras = ["email"], version = "^2.8.2"}
pydantic-settings = "^2.4.0"
requests = "^2.32.3"
postgres = "^4.0"
asyncpg = "^0.29.0"
dictalchemy3 = "^1.0.0"
fastapi = {extras = ["standard"], version = "^0.112.1"}
uvicorn = {extras = ["standard"], version = "^0.30.6"}
jinja2 = "^3.1.4"
aiosmtplib = "^3.0.2"
tabulate = "^0.9.0"
slowapi = "^0.1.9"
pydantic-extra-types = "^2.9.0"
semver = "^3.0.2"
async-fastapi-jwt-auth = "^0.6.6"
passlib = {extras = ["bcrypt"], version = "^1.7.4"}


[tool.poetry.group.dev.dependencies]
mypy = "^1.11.1"
black = {extras = ["jupyter"], version = ">=24.8.0"}
isort = "^5.13.2"
flake8-pyproject = "^1.2.3"
pylint = "^3.2.6"
pytest = "^8.3.2"
pytest-dependency = "^0.6.0"
sphinx = "^7.4.7"
pytest-asyncio = "0.21.2"
pytest-cov = "^4.1.0"
pylint-per-file-ignores = "^1.3.2"
sphinx-rtd-theme = "^2.0.0"
httpx = "^0.26.0"
sqlalchemy-stubs = "^0.4"
pytest-order = "^1.2.1"


[tool.black]
line-length = 100
exclude = '''
/(
  | __pycache__
  | .mypy_cache
  | alembic
  | docs
  | envs
)/
'''


[tool.isort]
profile = "black"


[tool.flake8]
max-line-length = 100
exclude = '''
/(
  | __pycache__
  | .mypy_cache
  | alembic
  | docs
  | envs
  | tests/utils/db_test_data_initializer.py
)/
'''


[tool.mypy]
warn_redundant_casts = true
no_site_packages = true
no_implicit_optional = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_calls = true
ignore_missing_imports = true
warn_no_return = true
warn_unreachable = true
strict_equality = true


[tool.pylint.MASTER]
# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the
# number of processors available to use.
jobs=0
max-line-length=100
load-plugins=[
    "pylint_per_file_ignores",
]


# see: https://github.com/christopherpickering/pylint-per-file-ignores
[tool.pylint-per-file-ignores]
"test_user_endpoints.py"="missing-function-docstring"
"tests/test_fastapi_utils.py"="missing-function-docstring"
"test_app_endpoints.py"="missing-function-docstring"
"test_email_sender_endpoints.py"="missing-function-docstring"
"test_task_runner.py"="missing-function-docstring"
"test_db_core.py"="missing-function-docstring"
"test_db_manager.py"="missing-function-docstring"
"test_moneybox_endpoints.py"="missing-function-docstring, too-many-locals, too-many-lines"
"test_prioritylist_endpoints.py"="missing-function-docstring"
"tests/test_utils.py"="missing-function-docstring, line-too-long"
"test_custom_openapi_schema.py"="missing-function-docstring"
"/routes/"="missing-function-docstring"
"requests.py"="duplicate-code"
"responses.py"="duplicate-code"
"/routes/responses/__init__.py"="duplicate-code"
"src/db/__init__.py"="duplicate-code"
"db_test_data_initializer.py"="invalid-name, line-too-long"

[tool.pytest.ini_options]
asyncio_mode = "auto"
addopts = "--maxfail=1 --cov=src --cov-report html"
testpaths = [
    "tests",
]


[tool.coverage.run]
omit = [
    # omit this single files
    "src/main.py",
    ]

[tool.vulture]
ignore_decorators = ["@model_validator", "@pytest.fixture"]
paths = ["tests", "src", "docs/vulture_whitelist.def"]
sort_by_size = true
make_whitelist = false


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
